---
title: "Class06: function"
author: Kate Zhou (PID:A17373286)
format: pdf
toc: true
---
## 1.Add function
New function
- name (function name)
- input arguments (there can be loads of these separated by a comma)
- the body (the R code that does the work)
```{r}
add <- function(x, y=10, z = 100) {
  x+y+z
}
```
I can just use this function like any functions long as R knows about it (i.e. run the code chunk)
```{r}
add(1, 100)
```

```{r}
add(c(1, 2, 3, 4), 100)
```
```{r}
add(1)
```
Functions can have "required" input arguments and  "optional" input arguments. The optional arguments are defined with an equals default value (`y=100`) in the function definition

## 2. Generate DNA Function
> Q. Write a function to return a DNA sequence of a user specified length? Call it `generate_dna()`

```{r}
students <- c("jeff", "jeremy", "peter")

sample(students, size=5, replace=TRUE)
```

Now work with `bases` rather than `students`
```{r}
bases <- c("A", "C", "G", "T")

sample(bases, size=10, replace=TRUE)
```
Now I have a working "snipt" of 
```{r}
generate_dna <-function(size=5){
  bases <- c("A", "C", "G", "T")
  sample(bases, size=size, replace=TRUE)
}
```

```{r}
generate_dna()
```
I want the ability to return a sequence like "AGCACCTG" (i.e a one element vector where the bases are all together)

```{r}
generate_dna <-function(size=5, together=TRUE) {
  bases <- c("A", "C", "G", "T")
  sequence <- sample(bases, size=size, replace=TRUE)
  if (together) {
    sequence <- paste(sequence, collapse = "")
  }
  return(sequence)
}
```

```{r}
generate_dna()
```

## 3. Generate Protein Function

> Q. Write a protein sequence generating function that will return sequence of a user specified length?

We can get the set of 20 natural amino-acids from the **bio3d** package

```{r}
library("bio3d")
bio3d::aa.table$aa1[1:20]
```
```{r}
generate_protein <-function(size=6, together=TRUE) {
  bases <- bio3d::aa.table$aa1[1:20]
  
  sequence <- sample(bases, size=size, replace=TRUE)
  if (together) {
    sequence <- paste(sequence, collapse = "")
  }
  return(sequence)
}
```
 
We can fix this inability to generate multiple sequences by either editing and adding to the functio body code (e.g. a for loop) or by using the R **apply ** family of utility functions

```{r}
sapply(6:12, generate_protein)
```
```{r}
generate_protein()
```
> Q. Generate random protein sequences of length 6 to 12 amino acids.

```{r}
ans <- sapply(6:12, generate_protein)

cat(ans, sep="\n")
```

I want this to look like 

```
>ID.6
EWIGVH
>ID.7
IHGPGHY
>ID.8
GQMKQNHS
>ID.9
WTVWYSTGI
>ID.10
TQSKKAGTRD
>ID.11
EVHTIMNENIG
>ID.12
FHYFDYYHIGAW
```

```{r}
id_head <- function(number) {
  paste(">ID.", as.character(number), sep="")
}
proteins <- sapply(6:12, generate_protein)
heads <- sapply(6:12, id_head)
cat(paste(heads, proteins, sep="\n"), sep = "\n")
```

```{r}
cat(paste(">ID.", 6:12, "\n", ans, sep=""), sep="\n")
```

> Q. Determin if these sequences can be found in nature
It would be cool and useful if I could get FASTA format output

I BLASTp searched my FASTA format sequences against NR and found that length 6, 7 are not unique and can be found in the databases with 100% coverage and 100% identity.

But for length 8, the coverage is 88% with 100% identity, or 100% coverage and 87.50% identity. For length 9, 100% coverage and 89% identity.

Random sequences  of length 8 and above are unique and cannot be found in database.

```{r}
dim(cars)
help(mean())
```

