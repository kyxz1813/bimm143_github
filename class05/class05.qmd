---
title: "Class 5: Data Visualization with ggplot"
author: "Kate Zhou (PID: A17373286)"
format: pdf
toc: true
---

# Background

There are many graphics systems available in R. These include "base" R and tons of add on packages like **ggplot2**.

Let's compare "base" and **ggplot2** briefly. We can use some example data that is built-in with R called `cars`:

```{r}
head(cars)
```

In base R I can just call 'plot()'

```{r}
plot(cars)
```

How can we do this with **ggplot2**

First we need to install the package. We do this (one time only) `install.packages("ggplot2")`.

> Key point: I only install packages in the R console not within quarto docs or R scripts.

Before I use any add-on package, I must load it up with a call to `library()`

```{r}
library(ggplot2)
ggplot(cars)
```

Every ggplot need at least 3 things: 

1. the **data** (in our case `cars`)
2. the **aes**thetics (how the data map to the plot)
3. the **geom**s that determine how the plot is drawn (lines, points, density, etc.)

```{r}
ggplot(cars) + 
  aes(x = speed, y = dist)
  
```
```{r}
ggplot(cars) + 
  aes(x = speed, y = dist) +
  geom_point()
```
for "simple" plots ggplot is much more verbose than base R, but the defaults are nicer and for complicated plots it becomes much more efficient and structured.

> Q. Add a line to show the relationship of speed to stopping distance (i.e. add another "layer")

```{r}
ggplot(cars) + 
  aes(x = speed, y = dist) +
  geom_point() +
  geom_abline()
```

```{r}
p <- ggplot(cars) + 
  aes(x = speed, y = dist) +
  geom_point() +
  geom_smooth(se=FALSE, method="lm")

```

I can always save any ggplot object (i.e. plot) and then use it later for adding more layers.
```{r}
p
```
> Q. Add a title and subtitle

```{r}
p + labs(
    title = "My first ggplot",
    subtitle = "Stopping distance of old cars",
    caption = "BIMM143",
    x="Speed(MPG)",
    y="Stopping distance(ft)"
  ) +
  theme_bw()
```


## Gene Expression Plot

Read input data into R

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

> Q. How many genes are in this dataset?

```{r}
nrow(genes)
```
> Q. How many columns are there?

```{r}
ncol(genes)
```
> Q. What are the column names?

```{r}
colnames(genes)
```

> Q. How many "up" and "down" regulated genes are there

```{r}
table(genes$State)
```
> Q. Make a first plot of this data

```{r}
ggplot(genes) +
  aes(x=Condition1, y=Condition2, col=State) +
  scale_color_manual(values=c("darkslateblue", "grey", "coral")) +
  geom_point() +
  labs(title="Gene Expression Changes upon Drug Treatment",
       x="Control (no drugs)",
       y="Drug Treated") +
  theme_bw()
```

# Using different geoms

Let's plot some aspects of the in-built `mtcars` dataset.
```{r}
head(mtcars)
```
> Q1. Scatter plot of `mpg` vs `disp`

```{r} 
p1 <- ggplot(mtcars) +
  aes(x=mpg, y=disp) +
  geom_point()
```

> Q2. Boxplot of `gear` vs `disp`

```{r}
p2 <- ggplot(mtcars) +
  aes(x=gear, y=disp, group=gear) +
  geom_boxplot()
```

> Q3. barplot of `carb`

```{r}
p3 <- ggplot(mtcars) +
  aes(carb) +
  geom_bar()
```

> Q4. Smooth of `disp` vs `qsec`

```{r}
p4 <- ggplot(mtcars) +
  aes(x=mpg, y=qsec) +
  geom_smooth()
```
I want to combine all these plots into one figure with multiple panels.

We can use the **patchwork** package to do this

```{r}
library(patchwork)
(p1 / p2 | p3 / p4)
```

```{r}
ggsave(filename= "myplot.png", width=5, height=3)
```

## gapminder
```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
head(gapminder)
```
> Q. How many countries are there in this dataset?

```{r}
length(unique(gapminder$country))
```

> Q. Plot gdpPercap vs lifeExp by continent

```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp, color = continent) +
  geom_point(alpha=0.3) +
  facet_wrap(~continent) +
  labs(x = 'GDP per capita', y = 'life expectancy') +
  theme_bw()
```


